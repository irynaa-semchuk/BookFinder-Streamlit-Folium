import re
from folium import plugins
from branca.element import Figure
import streamlit.components.v1 as components

import scrap
import funs
import graf
from threading import Thread
import pickle
from config import hosts
from itertools import product
from math import inf
import pickle
from datetime import datetime
import pandas as pd
import streamlit as st
from streamlit_folium import folium_static
import folium
import os
from PIL import Image
from requests.exceptions import ConnectionError
import requests
from datetime import datetime as dt
import branca
from folium import plugins
from geopy.geocoders import Nominatim
import time
import geolocation


file_path = "./img/"
img = Image.open(os.path.join(file_path, 'logo.ico'))
st.set_page_config(page_title='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', page_icon=img, layout="wide", initial_sidebar_state="expanded")

info_img, info_text = st.columns(2)
logo_img = Image.open(os.path.join(file_path, 'booklogo_.png'))
with info_img:
    st.image(logo_img, width= 270)
with info_text:
    css_text = "p {text-align: justify;}"
    st.markdown(f"""<style>{css_text }</style><p>–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É –∫–Ω–∏–≥, –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ü—ñ–Ω–∏ —Ç–∞ —É–º–æ–≤–∏ —Ä—ñ–∑–Ω–∏—Ö –∫–Ω–∏–≥–∞—Ä–µ–Ω—å. –í—ñ–Ω –Ω–∞–¥–∞—î –≥–µ–æ–ø—Ä–æ—Å—Ç–æ—Ä–æ–≤—ñ –¥–∞–Ω—ñ, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑'—è—Å—É–≤–∞—Ç–∏, –¥–µ –Ω–∞–π–±–ª–∏–∂—á–∞ –∫–Ω–∏–≥–∞—Ä–Ω—è —á–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —Ç–∞ –ø—Ä–æ–∫–ª–∞—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –¥–æ –Ω–∏—Ö –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.</p>""", unsafe_allow_html=True)
    st.markdown(f""" <p>–ö–Ω–∏–≥–∞—Ä–Ω—ñ, –≤ —è–∫–∏—Ö –≤—ñ–¥–±—É–≤–∞—Å—è –∑–±—ñ—Ä —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ:</p>
    <ul>
      <li>–ö–ª—É–± —Å—ñ–º–µ–π–Ω–æ–≥–æ –¥–æ–∑–≤—ñ–ª—è</li>
      <li>Yakaboo</li>
    </ul>""",unsafe_allow_html=True)

st.title('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')

if "myauthor" not in st.session_state:
    st.session_state.myauthor = []

if "list_author" not in st.session_state:
    st.session_state.list_author = []

if "mytitle" not in st.session_state:
    st.session_state.mytitle = []

if "list_title" not in st.session_state:
    st.session_state.list_title = []

if "myamount" not in st.session_state:
    st.session_state.myamount = []

if "list_amount" not in st.session_state:
    st.session_state.list_amount = []

if "chkarr" not in st.session_state:
    st.session_state.chkarr = []

if "rerun" not in st.session_state:
    st.session_state.rerun = False

l1, l2, l3 = st.columns(3)


def cmpltBook(task):
    idx = st.session_state.myauthor.index(task)
    st.session_state.chkarr[idx] = not st.session_state.chkarr[idx]
    st.session_state.rerun = True


def listBook():
    st.session_state.list_author = []
    for i, author in enumerate(st.session_state.myauthor):
        with l1:
            st.session_state.list_author.append(st.write(author,
                value = st.session_state.chkarr[i], key = 'l' + f'{dt.now():%d%m%Y%H%M%S%f}',
                                                    on_change = cmpltBook, args=(author,)))

    st.session_state.list_title = []
    for i, task in enumerate(st.session_state.mytitle):
        with l2:
            st.session_state.list_title.append(
                st.write(task, value=st.session_state.chkarr[i], key='l' + f'{dt.now():%d%m%Y%H%M%S%f}',
                         on_change=cmpltBook, args=(task,)))

    st.session_state.list_amount = []
    for i, task in enumerate(st.session_state.myamount):
        with l3:
            st.session_state.list_amount.append(
                st.write(task, value=st.session_state.chkarr[i], key='l' + f'{dt.now():%d%m%Y%H%M%S%f}',
                         on_change=cmpltBook, args=(task,)))


if st.session_state.rerun == True:
    st.session_state.rerun = False
    st.experimental_rerun()

else:
    with l1:
        title = st.text_input('–ü—Ä—ñ–∑–≤–∏—â–µ –∞–≤—Ç–æ—Ä–∞', placeholder = '–ü—Ä—ñ–∑–≤–∏—â–µ –∞–≤—Ç–æ—Ä–∞')
    with l2:
        title2 = st.text_input('–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏', placeholder = '–ù–∞–∑–≤–∞ –∫–Ω–∏–≥–∏')
    with l3:
        title3 = st.text_input('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏–º—ñ—Ä–Ω–∏–∫—ñ–≤', placeholder = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏–º—ñ—Ä–Ω–∏–∫—ñ')

    if st.button('–î–æ–±–∞–≤–∏—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'):
        if title != "" and title2 != "" and title3 != "":
            st.session_state.myauthor.append(title)
            st.session_state.mytitle.append(title2)
            st.session_state.chkarr.append(False)
            st.session_state.myamount.append(title3)
            st.session_state.chkarr.append(False)


listBook()
list_author = st.session_state.myauthor
list_title = st.session_state.mytitle
list_amount = st.session_state.myamount
list_ = []
for i in range(len(list_amount)):
    if list_amount[i] == '':
        amount_int = 1
    else:
        amount_int = list_amount
        list_.append({"id": i, "author": list_author[i],
                      "title": list_title[i],
                      "amount": int(amount_int[i])})

if "list_dict" not in st.session_state:
    st.session_state.list_dict = []
st.session_state.list_dict = list_
st.write(" ")
st.write("–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω—é –∫–Ω–∏–≥—É –∑—ñ —Å–ø–∏—Å–∫—É")
if st.button('–í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–∏–≥—É ‚ùå'):
    try:
        author = st.session_state.myauthor.pop()
        title = st.session_state.mytitle.pop()
        amount = st.session_state.myamount.pop()
        st.error(f'–í–∏–¥–∞–ª–µ–Ω–æ {author} - {title}')
        st.session_state.list_dict.pop()
        st.write(st.session_state.list_dict)
    except IndexError:
        st.error("–°–ø–∏—Å–æ–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–∏–π ‚ùå")

order_list = st.session_state.list_dict

if "price_info_state" not in st.session_state:
    st.session_state.price_info_state = {}

if "order_state" not in st.session_state:
    st.session_state.order_state = []

if "delivery_info_state" not in st.session_state:
    st.session_state.delivery_info_state = {}


if st.button('–ü–æ—à—É–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'):
    with st.spinner('–ó–∞ —á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...'):
        def thread(order_list, host):
            for item in order_list:
                args = (item['author'], item['title'], host)
                price_info[item['id']][host] = scrap.get_price(*args)
            delivery_info[host] = scrap.get_delivery(host)

        price_info = {key: {} for key in range(len(order_list))}
        delivery_info = {key: None for key in hosts.keys()}

        threads = [Thread(target=thread, args=(order_list, host)) for host in hosts]
        for item in threads:
            item.start()
        for item in threads:
            item.join()

        with open('data.pickle', 'wb') as f:
            pickle.dump(price_info, f)

        with open('data.pickle', 'rb') as f:
            price_info = pickle.load(f)

        my_order = funs.check_book(price_info, order_list)
        price_info = my_order[0]
        st.session_state.price_info_state = price_info
        order_list = my_order[1]
        delivery_info = {'bookclub.ua': (60.0, 390.0),
                     'yakaboo.ua': (60.0, inf)}
        st.session_state.delivery_info_state = delivery_info

        markets = list(hosts.keys())
        if "markets_state" not in st.session_state:
            st.session_state.markets_state = markets
        def dfs_find_routes(tree, start, end):
            global min_price, order
            if start == end:
                p = funs.price(price_info, delivery_info, graf.route_to_order(route), order_list)
                if p and p[0] < min_price:
                    min_price, order = p
            else:
                for node in tree[start]:
                    if not visited.get(node, False):
                        visited[node] = True
                        route.append(node)
                        dfs_find_routes(tree, node, end)
                        visited[node] = False
                        route.remove(node)

        adj = graf.build_adj_list(price_info, markets)
        visited, route = {}, []
        min_price, order = inf, None
        dfs_find_routes(adj, 0, max(adj.keys()))
        st.session_state.order_state = order

col1, col2 = st.columns(2)
col0 = [col1,col2]
image_bookclub = Image.open(os.path.join(file_path, 'bookclub.png'))
image_yakaboo = Image.open(os.path.join(file_path, 'yakaboo.png'))
list_img0 = [image_bookclub, image_yakaboo]
tab1, tab2 = st.tabs(["–ó–∞–º–æ–≤–ª–µ–Ω—è –∑ –≤–∞—Ä—Ç—ñ—Å—é –¥–æ—Å—Ç–∞–≤–∫–∏", "–ë–µ–∑ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç–∞–≤–∫–∏"])
try:
    with tab1:
        funs.display(st.session_state.order_state, st.session_state.markets_state,
        st.session_state.price_info_state, st.session_state.delivery_info_state,order_list, col0, list_img0)


    with tab2:
        total_price = 0
        for market_id in range(len(st.session_state.order_state)):
            if not st.session_state.order_state[market_id]:
                continue
            with col0[market_id]:
                market_total = 0
                for item in st.session_state.order_state[market_id]:
                    amount = order_list[item]["amount"]
                    price = st.session_state.price_info_state[item][st.session_state.markets_state[market_id]][0]
                    total = price * amount
                    market_total += total
                total_price += market_total
        st.info(f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {total_price} –≥—Ä–Ω.")
except:
    pass

with st.expander("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É üìÆ"):
    funs.get_delivery_info(st.session_state.delivery_info_state)

with st.expander("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–Ω–∏–≥–∏ üìö"):
    funs.get_book_info(st.session_state.price_info_state, order_list)

st.header('–ö–∞—Ä—Ç–∞')
container = st.container()
st.write("–í–µ–¥—ñ—Ç—å —Å–≤–æ—é —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —è–∫—ñ –∫–Ω–∏–≥–∞—Ä–Ω—ñ —î –ø–æ—Ä—è–¥ üìç")
title = st.text_input('–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞', placeholder = '–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞', value = "–£–∫—Ä–∞—ó–Ω–∞")


app = Nominatim(user_agent='myapp')

location = geolocation.get_location_by_address(title, app)
latitude = location["lat"]
longitude = location["lon"]

st.write("–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∫–ª–∞—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–Ω–∏–Ω–∞—Ä–µ–Ω—å üè£, –≤–µ–¥—ñ—Ç—å —ó—Ö–Ω—ñ –∞–¥—Ä–µ—Å–∏ –≤ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–ª–µ")
if "myaddress" not in st.session_state:
    st.session_state.myaddress = []

if "tskaddress" not in st.session_state:
    st.session_state.tskaddress = []

if "loopaddress" not in st.session_state:
    st.session_state.loopaddress = []

if "returnn" not in st.session_state:
    st.session_state.returnn = False

addresses_marker = [title,]
def cmpltAddress(addr):
    idx = st.session_state.myaddress.index(addr)
    st.session_state.loopaddress[idx] = not st.session_state.loopaddress[idx]
    st.session_state.returnn = True


def listAddress():
    st.session_state.tskaddress = []
    for i, addr in enumerate(st.session_state.myaddress):
        st.session_state.tskaddress.append(st.write(addr,
                value = st.session_state.loopaddress[i], key = 'l2' + f'{dt.now():%d%m%Y%H%M%S%f}',
                                                    on_change = cmpltAddress, args=(addr,)))
        addresses_marker.append(addr)


if st.session_state.returnn == True:
    st.session_state.returnn = False
    st.experimental_rerun()

else:
    listaddress = st.text_input('–ê–¥—Ä–µ—Å–∞ –∫–Ω–∏–≥–∞—Ä–Ω—ñ', placeholder='–ê–¥—Ä–µ—Å–∞ –∫–Ω–∏–≥–∞—Ä–Ω—ñ')
    if st.button('–î–æ–±–∞–≤–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –∫–Ω–∏–≥–∞—Ä–Ω—ñ'):
        if listaddress != "":
            st.session_state.myaddress.append(listaddress)
            st.session_state.loopaddress.append(False)

listAddress()
st.write("–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –∫–Ω–∏–≥–∞—Ä–Ω—ñ —á–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏")
if st.button('–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É ‚ùå'):
    try:
        streat_addreess = st.session_state.myaddress.pop()
        st.error(f'–í–∏–¥–∞–ª–∏–Ω–æ {streat_addreess} !')
        st.write(streat_addreess)
        addresses_marker.pop()
    except IndexError:
        st.error("–°–ø–∏—Å–æ–∫ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–∏–π ‚ùå")

if "radius" not in st.session_state:
    st.session_state.radius = "200 –º"

if "type_map" not in st.session_state:
    st.session_state.type_map = "–í—ñ–¥–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–∞ –≤—É–ª–∏—Ü—å"


data = {
    "200 –º": 200,
    "500 –º": 500,
    "1 –∫–º": 1000,
    "3 –∫–º": 3000,
}
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–∞—Ä—Ç–∏")
st.sidebar.selectbox(
    label="–Ø–∫–∏–π —Ä–∞–¥—ñ—É—Å –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏?",
    options=("200 –º","500 –º","1 –∫–º", "3 –∫–º"),
    key="radius"
)
radius = data[st.session_state.radius]
data_map = {
    "–í—ñ–¥–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–∞ –≤—É–ª–∏—Ü—å": "OpenStreetMap",
    "–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∞ –∫–∞—Ä—Ç–∞": "Stamen Terrain",
    "–ß–æ—Ä–Ω–æ-–±—ñ–ª–∞ –∫–∞—Ä—Ç–∞":"Stamen Toner"

}
add_select = st.sidebar.selectbox(label="–Ø–∫—É –∫–∞—Ä—Ç—É —Ö–æ—á–µ—Ç–µ –æ–±—Ä–∞—Ç–∏?",
                                  options=("–í—ñ–¥–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–∞ –≤—É–ª–∏—Ü—å", "–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∞ –∫–∞—Ä—Ç–∞","–ß–æ—Ä–Ω–æ-–±—ñ–ª–∞ –∫–∞—Ä—Ç–∞"),
                                  key="type_map")
my_adress = geolocation.get_location()
type_map = data_map[st.session_state.type_map]


def folium_static(fig, width=1350, height=550):
    if isinstance(fig, folium.Map):
        fig = folium.Figure().add_child(fig)
        return components.html(
            fig.render(), height=(fig.height or height) + 10, width=width
        )

    elif isinstance(fig, plugins.DualMap):
        return components.html(
            fig._repr_html_(), height=height + 10, width=width
        )


Source = ()
try:
    if title == "–£–∫—Ä–∞—ó–Ω–∞":
        m = folium.Map(tiles=type_map,location=[my_adress['latitude'], my_adress['longitude']], zoom_start=15)
        folium.Marker([my_adress['latitude'], my_adress['longitude']], popup="–ú–æ—î –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
                      tooltip="–ú–æ—î –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
                      icon=folium.Icon(color='purple', prefix='fa', icon='anchor')).add_to(m)
        folium.Circle([my_adress['latitude'], my_adress['longitude']], radius=radius).add_to(m)
        Source = (my_adress['latitude'], my_adress['longitude'])
    else:
        m = folium.Map(tiles=type_map, location=[latitude, longitude], zoom_start=15)
        Source = (float(latitude), float(longitude))
        folium.Marker([latitude, longitude], popup="–ú–æ—î –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
                      tooltip="–ú–æ—î –º—ñ—Å—Ü–µ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è", icon=folium.Icon(color='purple',
                                                                        prefix='fa', icon='male')).add_to(m)
        folium.Circle([latitude, longitude], radius=radius).add_to(m)
except:
    container.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –æ—Ç—Ä–∏–º–∞–Ω—è–º –≤–∞—à–∏—Ö –∫–æ—Ä–¥–∏–Ω–∞—Ç—ñ–≤', icon="üö®")
    m = folium.Map(tiles=type_map, location=[48.98947939673382, 31.38346472589481], zoom_start=6)


def color_change(data):
    if int(data) == 10:
        return 'red'
    elif int(data) == 20:
        return 'blue'
    elif int(data) == 30:
        return 'orange'
    else:
        return 'blue'


data_libraries = pd.read_csv("libraries.csv")
lat_libraries = data_libraries['lat']
lon_libraries = data_libraries['lon']
value_libraries = data_libraries['value']
name_libraries = data_libraries['name']
address_libraries = data_libraries['address']
work_libraries = data_libraries['work schedule']
contacts_libraries = data_libraries['contacts']

try:
    for lat, lon, value, name, address, work, contacts\
            in zip(lat_libraries, lon_libraries,value_libraries, name_libraries, address_libraries,
                   work_libraries, contacts_libraries):
        iframe_deep = branca.element.IFrame(html=geolocation.windowBookshop(name, address, work, contacts), width=350, height=310)
        popup_deep = folium.Popup(iframe_deep, parse_html=True)
        folium.Marker(location=[lat, lon], popup=popup_deep, tooltip="–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞",
                      icon=folium.Icon(color=color_change(value), icon='glyphicon glyphicon-book'
                                       )).add_to(m)
except:
    pass

data_shop = pd.read_csv("bookshop.csv")
lat_shop = data_shop['lat']
lon_shop = data_shop['lon']
value_shop = data_shop['value']
name_shop = data_shop['name']
address_shop = data_shop['address']
work_shop = data_shop['work schedule']
contacts_shop = data_shop['contacts']

try:
    for lat, lon, value, name, address, work, contacts in zip(lat_shop, lon_shop, value_shop, name_shop,
                                                              address_shop, work_shop, contacts_shop):
        iframe_deep = branca.element.IFrame(html=geolocation.windowBookshop(name, address, work, contacts), width=350, height=310)
        popup_deep = folium.Popup(iframe_deep, parse_html=True)
        folium.Marker(location=[lat, lon], popup=popup_deep, tooltip="–ö–Ω–∏–≥–∞—Ä–Ω–Ω—è",
                      icon=folium.Icon(color=color_change(value), prefix='fa', icon='fa-shopping-cart'
                                       )).add_to(m)
except:
    pass


data_order = pd.read_csv("shop_order.csv")
lat = data_order['lat']
lon = data_order['lon']
value = data_order['value']
name = data_order['name']
address = data_order['adress']
work = data_order['work schedule']
contacts = data_order['contacts']
market = data_order['market']
try:
    for lat, lon, value, name, market, address, work, contacts \
            in zip(lat, lon, value, name, market, address, work, contacts):
        html = geolocation.book_table_html(name,funs.marker_info(name, st.session_state.order_state, st.session_state.markets_state,
        st.session_state.price_info_state, order_list))
        iframe_deep = branca.element.IFrame(html=geolocation.windowBookshop(market, address, work, contacts)+html,
                                            width=350, height=310)
        popup_deep = folium.Popup(iframe_deep, parse_html=True)
        folium.Marker(location=[lat, lon], popup= popup_deep, tooltip=market,
                      icon=folium.Icon(color=color_change(value)
                                       )).add_to(m)
except:
    pass

if "type" not in st.session_state:
    st.session_state.type = "–ü—ñ—à–∫–∏"

typedata = {
    "–ü—ñ—à–∫–∏": 'walk',
    "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å": 'drive',
    "–í–µ–ª–æ—Å–∏–ø–µ–¥": 'bicycle',
    "–ú—ñ—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": 'transit',
    "–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞": 'truck'

}
radiotype = st.radio(
    label="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è:",
    options=("–ü—ñ—à–∫–∏", "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–ú—ñ—Å—å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–í–∞–Ω—Ç–∞–∂—ñ–≤–∫–∞"),
    key="type",
    horizontal = True)

type = typedata[st.session_state.type]
if "responses" not in st.session_state:
    st.session_state.responses = []
if "lat_lons" not in st.session_state:
    st.session_state.lat_lons = []

if st.button('–ü–æ—à—É–∫ –º–∞—Ä—à—Ä—É—Ç—É'):
    if st.session_state.responses is not []:
        st.session_state.responses.clear()
        st.session_state.lat_lons.clear()
    st.session_state.lat_lons = [geolocation.get_lat_long_address(addr) for addr in addresses_marker]
    for n in range(len(st.session_state.lat_lons)-1):
      lat1, lon1, lat2, lon2 = st.session_state.lat_lons[n][0], st.session_state.lat_lons[n][1],\
                               st.session_state.lat_lons[n+1][0], st.session_state.lat_lons[n+1][1]
      response = geolocation.get_directions(lat1, lon1, lat2, lon2, mode=type)
      st.session_state.responses.append(response)
try:
    m = geolocation.create_map(st.session_state.responses, st.session_state.lat_lons, m)
    geolocation.get_time_distance(st.session_state.responses)
except KeyError as ke:
    pass


city = ['–õ—å–≤—ñ–≤', '–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ', '–ß–µ—Ä–Ω—ñ–≤—Ü—ñ', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–∫–∞—Å–∏', '–ß–µ—Ä–∫–∞—Å–∏', '–°—É–º–∏', '–†—ñ–≤–Ω–µ','–ö—Ä–µ–º–µ–Ω—á—É–∫',
        '–ú–∏—Ä–≥–æ—Ä–æ–¥', '–ü–æ–ª—Ç–∞–≤–∞', '–û–¥–µ—Å–∞', '–ú–∏–∫–æ–ª–∞—ó–≤', '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π', '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–£–∂–≥–æ—Ä–æ–¥', '–ñ–∏—Ç–æ–º–∏—Ä',
         '–î–Ω—ñ–ø—Ä–æ', '–ö—Ä–∏–≤–∏–π', '–ü–∞–≤–ª–æ–≥—Ä–∞–¥', '–õ—É—Ü—å–∫', '–í—ñ–Ω–Ω–∏—Ü—è', '–ë–æ—Ä–∏—Å–ø—ñ–ª—å', '–¶–µ—Ä–∫–≤–∞' '–ö–∏—ó–≤—Å—å–∫–∞','–ö–∞–º`—è–Ω–µ—Ü—å-–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π', '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å']
my_adress_text = location["display_name"]
geolocation.get_city(my_adress_text, city)
address = data_order['adress']

c1, c2 = st.columns(2)
if "distance" not in st.session_state:
    st.session_state.distance = []

if "distance_shop" not in st.session_state:
    st.session_state.distance_shop = []

if "distance_libraries" not in st.session_state:
    st.session_state.distance_libraries = []

lat_shop = list(data_shop['lat'])
lon_shop = list(data_shop['lon'])
lat = list(data_order['lat'])
lon = list(data_order['lon'])
market = list(data_order['market'])
address = list(data_order['adress'])
name_shop = list(data_shop['name'])
address_shop = list(data_shop['address'])
lat_libraries = list(data_libraries['lat'])
lon_libraries = list(data_libraries['lon'])
value_libraries = list(data_libraries['value'])
name_libraries = list(data_libraries['name'])
address_libraries = list(data_libraries['address'])


def check(work):
    if work == 0:
        st.write("–ü–æ—Ä—è–¥ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–Ω–∏–≥–∞—Ä–µ–Ω—å")


with st.expander("–ù–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–≥–∞—Ä–Ω—ñ —Ç–∞ –±—ñ–±–ª—ñ–æ—Ç–Ω–∫–∏üèÉüè™üîñ‚Äç"):
    if Source == (float(latitude), float(longitude)):
        st.subheader('–ù–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–≥–∞—Ä–Ω–Ω—ñ –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É –≤ –º–µ–∂–∞—Ö –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞')
        geolocation.get_near_market(address, geolocation.get_city(my_adress_text, city))
        st.write(" ")
        st.subheader('–ù–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–≥–∞—Ä–Ω—ñ –∑–≥—ñ–¥–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
        geolocation.distance_marker(st.session_state.distance, Source, lat, lon)
        work = geolocation.write_info_distance(st.session_state.distance, Source, lat, lon, market, address, radius, m)
        check(work)
        st.subheader('–ù–∞–π–±–ª–∏–∂—á—ñ –∫–Ω–∏–≥–∞—Ä–Ω—ñ')
        geolocation.distance_marker(st.session_state.distance_shop,Source, lat_shop,lon_shop)
        work = geolocation.write_info_distance(st.session_state.distance_shop,Source, lat_shop,lon_shop, name_shop,
                                               address_shop, radius, m)
        check(work)
        st.subheader('–ù–∞–π–±–ª–∏–∂—á—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏')
        geolocation.distance_marker(st.session_state.distance_libraries, Source, lat_libraries, lon_libraries)
        work = geolocation.write_info_distance(st.session_state.distance_libraries,
                                               Source, lat_libraries, lon_libraries, name_libraries,
                                               address_libraries, radius, m)
        check(work)
    else:
        st.warning("–í–µ–¥—ñ—Ç—å —Å–≤–æ—é —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É, —â–æ–± –æ—Ç—Ä–º–∞—Ç–∏ –¥–∞–Ω—ñ", icon="‚ö†Ô∏è")

minimap = plugins.MiniMap()
m.add_child(minimap)
folium_static(m)

agree = st.checkbox('–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ –∫–Ω–∏–≥–∞—Ä–µ–Ω—å')
address = pd.DataFrame({
    '–ö–Ω–∏–≥–∞—Ä–Ω—è': [ data_order.iloc[n]['market'] for n in range(0,len(data_order))],
    '–ê–¥—Ä–µ—Å–∞': [data_order.iloc[n]['adress'] for n in range(0,len(data_order))],
    '–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏': [data_order.iloc[n]['work schedule'] for n in range(0,len(data_order))],
    '–ö–æ–Ω—Ç–∞–∫—Ç–∏': [data_order.iloc[n]['contacts'] for n in range(0,len(data_order))],
})

text = f"{address}"
if agree:
    st.write(address)

st.download_button(label='–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏', data=text)
